name: Run ETF Strategy from Release

on:
  push:
    branches:
      - main
    paths:
      - 'ETF_screened.py'
  workflow_dispatch:

jobs:
  strategy-only:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas tushare numpy oss2 jq

      - name: Download latest data from release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LATEST_RELEASE_ID=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          "https://api.github.com/repos/${{ github.repository }}/releases" | \
          jq -r '.[0].id')
          
          if [ "$LATEST_RELEASE_ID" == "null" ]; then
            echo "::error::Could not find any release."
            exit 1
          fi

          METRICS_URL=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          "https://api.github.com/repos/${{ github.repository }}/releases/${LATEST_RELEASE_ID}/assets" | \
          jq -r '.[] | select(.name == "etf_metrics_daily_report.csv") | .url')

          SCREENER_URL=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          "https://api.github.com/repos/${{ github.repository }}/releases/${LATEST_RELEASE_ID}/assets" | \
          jq -r '.[] | select(.name == "etf_screener_final_report.csv") | .url')
          
          curl -sLJO -H "Accept: application/octet-stream" -H "Authorization: token $GITHUB_TOKEN" "$METRICS_URL"
          curl -sLJO -H "Accept: application/octet-stream" -H "Authorization: token $GITHUB_TOKEN" "$SCREENER_URL"

      - name: Run strategy and upload
        env:
          TUSHARE_TOKEN: ${{ secrets.TUSHARE_TOKEN }}
          ALIYUN_ACCESS_KEY_ID: ${{ secrets.ALIYUN_ACCESS_KEY_ID }}
          ALIYUN_ACCESS_KEY_SECRET: ${{ secrets.ALIYUN_ACCESS_KEY_SECRET }}
          OSS_ENDPOINT: ${{ secrets.OSS_ENDPOINT }}
          OSS_BUCKET_NAME: ${{ secrets.OSS_BUCKET_NAME }}
        run: |
          python ETF_screened.py
          python upload_to_oss.py

      - name: Generate video data
        run: python video_data_generator.py

      # 可选：如果希望将新结果也发布为Release
      - name: Create release tag
        id: create_tag
        run: |
          DATE=$(date +'%Y%m%d%H%M')
          echo "tag=v$DATE" >> $GITHUB_ENV
          echo "release_name=Daily ETF Strategy Update $DATE" >> $GITHUB_ENV
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.tag }}
          release_name: ${{ env.release_name }}
          draft: false
          prerelease: true

      - name: Upload New Screener Report
        id: upload_screener_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./etf_screener_final_report.csv
          asset_name: etf_screener_final_report.csv
          asset_content_type: text/csv

      - name: Upload daily video data
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./daily_video_top1.csv
          asset_name: daily_video_top1.csv
          asset_content_type: text/csv

      - name: Upload weekly video data
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./weekly_video_top3.csv
          asset_name: weekly_video_top3.csv
          asset_content_type: text/csv
